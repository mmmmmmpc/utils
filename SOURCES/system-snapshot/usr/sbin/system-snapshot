#!/bin/bash
#
# Script to create, merge or discard snapshots of system volumes
# it also backs up /boot in order to be enable the 
#
# This file may be distributed under the terms of the GNU General
# Public License.
#
# Author:   Miguel PÃ©rez Colino <mperez@redhat.com>
# Version:  0.2
# Modifications:
#           2013-05-22  Creation
#           2013-05-23  Added some checks and logging
#

# Default options
BACKUP_DEVICES=""
BACKUP_DIR="/var/tmp/system-snapshot"
SNAPSHOT_SIZE="20"
DATE=$(date +%Y%m%d)

# Check we are running as root
if [ $(id -u) -ne 0 ]; then
    echo "This program must be run as root"
    exit 1
fi

# Sourcing config file
if [ -r /etc/sysconfig/$(basename $0) ] 
	source /etc/sysconfig/$(basename $0)
else
	echo "Configuration file /etc/sysconfig/$(basename $0) not found"
	exit 9
fi

function instance_create {
	# Check existence of BACKUP_DIR and create it if needed
	if [ ! -d ${BACKUP_DIR} ] ; then
		notify "Creating base backup dir ${BACKUP_DIR}"
    	mkdir -p ${BACKUP_DIR}
	fi

	INSTANCE_DIR=$(mktemp -d --tmpdir=${BACKUP_DIR} snapshot_${DATE}_XXXXX)
	INSTANCE=$(basename ${INSTANCE_DIR})
	INSTANCE_CONFIG="${INSTANCE_DIR}/config"
	BOOT_BACKUP_DIR=${INSTANCE_DIR}/boot
	
	echo "INSTANCE=${INSTANCE}" >> ${INSTANCE_CONFIG}
	echo "INSTANCE_DIR=${INSTANCE_DIR}" >> ${INSTANCE_CONFIG}
	echo "BOOT_BACKUP_DIR=${BOOT_BACKUP_DIR}" >> ${INSTANCE_CONFIG}
	echo "BACKUP_DEVICES=${BACKUP_DEVICES}" >> ${INSTANCE_CONFIG}
	
}

function instance_load {
}

function usage {
    echo "Usage: $(basename $0) [--create|--rollback|--discard]"
    exit 8
}

# Funtion "notify". Shows on screen and logs messages consistently
function notify {
    echo $1
    echo $(basename $0) [$$] $1 | logger
}

function lv_create {
    for DEVICE in $BACKUP_DEVICES ; do
        if [ -r ${DEVICE}_${INSTANCE} ] ; then
            notify "Snapshot ${DEVICE}_${INSTANCE} already in place, Please discard first"
        else
            notify "Creating snapshot ${DEVICE}_${INSTANCE} for device ${DEVICE}"
            lvcreate --extents ${SNAPSHOT_SIZE}%ORIGIN --snapshot --name ${DEVICE}_${INSTANCE} ${DEVICE}
            if [ $? = 0 ] ; then
                notify "Snapshot for ${DEVICE} created OK"
            else
                notify "Error creating snapshot for ${DEVICE}"
                exit 1
            fi
        fi
    done
}

function lv_rollback {
    for DEVICE in $BACKUP_DEVICES ; do
        notify "Rolling back snapshot ${DEVICE}_${INSTANCE} into device ${DEVICE}"
        lvconvert --merge ${DEVICE}_${INSTANCE} --background
    done
    notify "To finish the rollback, you need to reboot the machine"
}

function lv_discard {
    for DEVICE in $BACKUP_DEVICES ; do
        notify "Discarding device ${DEVICE}_${INSTANCE}"
        lvremove -f ${DEVICE}_${INSTANCE}
        if [ $? = 0 ] ; then
            notify "Snapshot ${DEVICE}_${INSTANCE} discarded OK"
        else
            notify "Error discarding snapshot ${DEVICE}_${INSTANCE}"
        fi
    done
}

function boot_create {
    if [ ! -d ${BOOT_BACKUP_DIR} ] ; then
        notify "Creating boot backup dir ${BOOT_BACKUP_DIR}"
        mkdir ${BOOT_BACKUP_DIR}
    fi
    if [ -f ${BOOT_BACKUP_DIR}/.backup_ok ] ; then
        notify "Backup in ${BOOT_BACKUP_DIR} already there. Please discard first"
    else
        notify "Backing up /boot into ${BOOT_BACKUP_DIR}"
        rsync -a --delete /boot/ ${BOOT_BACKUP_DIR}/
        if [ $? = 0 ] ; then
            notify "Backup finished OK"
            touch ${BOOT_BACKUP_DIR}/.backup_ok
        else
            notify "Error in /boot backup"
        fi
    fi
}

function boot_rollback {
    if [ -f ${BOOT_BACKUP_DIR}/.backup_ok ] ; then
        notify "Restoring backup from ${BOOT_BACKUP_DIR} into /boot"
        rsync -a --delete ${BOOT_BACKUP_DIR}/ /boot/
    else
        notify "Backup in ${BOOT_BACKUP_DIR} is not OK"
    fi
}

function boot_discard {
    notify "Cleaning up backup in ${BOOT_BACKUP_DIR}"
    rm -rf ${BOOT_BACKUP_DIR}
}

case "$1" in
    --create)
		instance_create
        boot_create
        lv_create
        ;;
    --rollback)
    	instance_load
        boot_rollback
        lv_rollback
        ;;
    --discard)
    	instance_load
        boot_discard
        lv_discard
        ;;
    --help|--usage|*)
        usage
esac



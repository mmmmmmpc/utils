#!/bin/bash
#
# Script to create, merge or discard snapshots of system volumes
# it also backs up /boot in order to be enable the 
#
# This file may be distributed under the terms of the GNU General
# Public License.
#
# Author:   Miguel PÃ©rez Colino <mperez@redhat.com>
# Version:  0.3
#
# Errorlevels
#			1	No parameters received 
#			2	Command not run as root
#			3	Main config file not found
#			4	No backup devices defined in config file 
#			5	Snapshot already in place
#			6	Error during snapshot creation
#			7	Problem with backup config file
#			8 	LV device not found
#			9	Error during rollback
#			10	Error during discard
#			11	Error during boot restore
#			12	Another instance running
#			13	Lockfile not found
#			14	Not enough space in Volume Group
#			15	Not enough space in Boot Backup dir

# Default options
BACKUP_DEVICES=""
BACKUP_DIR="/var/system-snapshot"
BACKUP_CONFIG="${BACKUP_DIR}/config"
BOOT_BACKUP_DIR="${BACKUP_DIR}/boot"
SNAPSHOT_SIZE="20"
LOCK_FILE="/var/run/$(basename $0)"

# Check we are running as root
if [ $(id -u) -ne 0 ]; then
    echo "This program must be run as root"
    exit 2
fi

# Loading vars from config file
if [ -r /etc/sysconfig/$(basename $0) ] ; then
	source /etc/sysconfig/$(basename $0)
else
	echo "Configuration file /etc/sysconfig/$(basename $0) not found"
	exit 3
fi	

function usage {
    echo "Usage: $(basename $0) [--create|--rollback|--rollback-and-reboot|--discard|--cleanup|--info]"
    echo "       To obtain more information run \"man $(basename $0)\" "
}

# Funtion "notify". Shows on screen and logs messages consistently
function notify {
    echo $1
    echo $(basename $0) [$$] $1 | logger
}

# Funtion "header". Shows screen message
function  header {
    notify "$1"
    echo "##################################################"
}

# Function lock_create
# Create a lock in order to avoid two instances running at the same time
function lock_create {
	if [ -r ${LOCK_FILE} ] ; then
		notify "Another instance of $(basename $0) is running. Exiting"
		exit 12
	else
		touch ${LOCK_FILE}
	fi
} 

# Function lock_delete
# Clean up the lock. To be used before exiting
function lock_delete {
	if [ -r ${LOCK_FILE} ] ; then
		rm -f ${LOCK_FILE}
	else
		notify "Lockfile for $(basename $0) not found. Exiting"
		exit 13
	fi
} 

# Function to perform checks before creation of backup and snapshot
function check_create {
	# Check the existence of backup devices in config file
	if [ $(echo ${BACKUP_DEVICES} | grep -c .) -eq 0 ] ; then
	 	notify "No backup devices defined in config file /etc/sysconfig/$(basename $0)"
		lock_delete
		exit 4
	fi
    
	# Check of previously created snapshots
    EXISTING_DEVICES=""
    for DEVICE in ${BACKUP_DEVICES} ; do
        if [ -r ${DEVICE}_snapshot ] ; then
        	EXISTING_DEVICES="${DEVICE}_snapshot ${EXISTING_DEVICES}" 
        fi
    done
	if [ $(echo ${EXISTING_DEVICES} | grep -c .) -ne 0 ] ; then
		notify "Snapshots for ${EXISTING_DEVICES} found. Please cleanup or discard first"
        lock_delete
        exit 5
	fi
    
    # Check for free space in VGs for each LV to be snapshotted
    for DEVICE in ${BACKUP_DEVICES} ; do
    	VG_NAME="$(lvs --noheadings -o vg_name ${DEVICE} 2>/dev/null)"
        VG_FREESPACE="$(expr 100 \* $(vgs -o vg_free --units s --noheadings ${VG_NAME}  | tr -cd '[:digit:]' 2>/dev/null)  /  $(vgs -o vg_size --units s --noheadings  ${VG_NAME} | tr -cd '[:digit:]' 2>/dev/null))"
	if [ ${VG_FREESPACE} -lt ${SNAPSHOT_SIZE} ] ; then
		notify "Not enough space in Volume Group ${VG_NAME} for device ${DEVICE}" 
		echo "Please add space to the Volume Group or change SNAPSHOT_SIZE in /etc/sysconfig/$(basename $0)"
		lock_delete
		exit 14
	fi 
    done
      
    #Check space needed for /boot backup
	if  [ $(df -k ${BACKUP_DIR} | awk '/[0-9]%/{print $(NF-2)}' | tr -cd '[:digit:]') -lt $(du -sk /boot/ | awk '{ print $1 }' | tr -cd '[:digit:]') ] ; then
		notify "Not enough space in ${BACKUP_DIR} to backup /boot"
		lock_delete
		exit 15
	fi
	    
	# Check existence of BACKUP_DIR and create it if needed
	if [ ! -d ${BACKUP_DIR} ] ; then
		notify "Creating base backup dir ${BACKUP_DIR}"
    	mkdir -p ${BACKUP_DIR}
	fi
}  

# Function to perform checks before rollback or discard of backup and snapshot
function check_use {
		# Check existence of backup config file and load it
	if [ ! -r ${BACKUP_CONFIG} ] ; then
        notify "Backup config file ${BACKUP_CONFIG} not found."
        lock_delete
        exit 7
	elif [ $(grep -c -e ^BACKUP_DEVICES= -e ^BOOT_BACKUP_DIR= -e ^DATE= /var/system-snapshot/config  | tr -cd '[:digit:]'  2>/dev/null) -lt 3 ]; then
		notify "Error in backup config file ${BACKUP_CONFIG}."
        lock_delete
        exit 7
    else
		source ${BACKUP_CONFIG}
    fi
    
    # Check snapshot devices in place
    for DEVICE in ${BACKUP_DEVICES} ; do
		if [ ! -r ${DEVICE}_snapshot ] ; then
			notify "Device ${DEVICE}_snapshot not found exiting...!"
			lock_delete
			exit 8
		fi
		if [ ! -r ${DEVICE} ] ; then
			notify "Device ${DEVICE} not found exiting...!"
			lock_delete
			exit 8
        fi	
    done
}

# Function to create LVM snapshots
function lv_create {
    # Create snapshots
    DEVICES_SNAPSHOTTED=""
    for DEVICE in ${BACKUP_DEVICES} ; do
        notify "Creating snapshot ${DEVICE}_snapshot for device ${DEVICE}"
		lvcreate --extents ${SNAPSHOT_SIZE}%ORIGIN --snapshot --name ${DEVICE}_snapshot ${DEVICE} > /dev/null 2>&1 
        if [ $? = 0 ] ; then
            notify "Snapshot for ${DEVICE} created OK"
            # List of snapshotted devices created
            DEVICES_SNAPSHOTTED="${DEVICE} ${DEVICES_SNAPSHOTTED}"
        else
            notify "Error creating snapshot for ${DEVICE}"
            # Performing a rollback of snapshots created
	    # Create temporary config file
	    BACKUP_CONFIG="/tmp/system-snapshot-temp-config"
	    rm -f ${BACKUP_CONFIG}
        # Include snapshots line in config file
   	    echo "BACKUP_DEVICES=\"${DEVICES_SNAPSHOTTED}\"" >> ${BACKUP_CONFIG}
	    echo "BOOT_BACKUP_DIR=\"${BOOT_BACKUP_DIR}\"" >> ${BACKUP_CONFIG}
	    echo "DATE=" >> ${BACKUP_CONFIG}
	    # Now the rollback is launched
        source ${BACKUP_CONFIG}
        lv_discard
        lock_delete
        exit 6
        fi
    done

    # Include the list of devices in config file
    echo "BACKUP_DEVICES=\"${DEVICES_SNAPSHOTTED}\"" >> ${BACKUP_CONFIG}
}

function lv_rollback {
    # Rollback!!!
	ERRORLVL=0
    for DEVICE in ${BACKUP_DEVICES} ; do
        notify "Rolling back snapshot ${DEVICE}_snapshot into device ${DEVICE}"
        lvconvert --merge ${DEVICE}_snapshot --background  > /dev/null 2>&1
        if [ $? = 0 ] ; then
            notify "Snapshot ${DEVICE}_snapshot rollback OK"
        else
            notify "Error in ${DEVICE}_snapshot rollback"
            ERRORLVL=1
        fi
    done
    if [ ${ERRORLVL} != 0 ] ; then
    	notify "Error during rollback"
    	lock_delete
    	exit 9
    fi 
    
    notify "To finish the rollback, the system needs to be rebooted"
}

function lv_discard {
    ERRORLVL=0
    for DEVICE in ${BACKUP_DEVICES} ; do
        notify "Discarding device ${DEVICE}_snapshot"
        lvremove -f ${DEVICE}_snapshot  > /dev/null 2>&1
        if [ $? = 0 ] ; then
            notify "Snapshot ${DEVICE}_snapshot discarded OK"
        else
            notify "Error discarding snapshot ${DEVICE}_snapshot"
            ERRORLVL=1
        fi
    done
    if [ ${ERRORLVL} != 0 ] ; then
    	notify "Error during discard"
    	lock_delete
    	exit 10
    else
    	notify "Cleaning config file ${BACKUP_CONFIG}"
    	rm -rf ${BACKUP_CONFIG}
    fi 
}

function lv_cleanup {
	# Check existence of backup config file and load it
	if [ -r ${BACKUP_CONFIG} ] ; then
        notify "Backup config file ${BACKUP_CONFIG} found."
        if [ $(grep -c -e ^BACKUP_DEVICES= -e ^BOOT_BACKUP_DIR= -e ^DATE= /var/system-snapshot/config) -eq 3 ]; then
			notify "Backup config file ${BACKUP_CONFIG} OK."
			source ${BACKUP_CONFIG}
    	fi
    else
    	# If config file not available, use general one.
    	notify "Backup config file not found. Using default options."
	fi
    
    # Cleanup
    lv_discard     
}

function boot_create {
    if [ ! -d ${BOOT_BACKUP_DIR} ] ; then
        notify "Creating boot backup dir ${BOOT_BACKUP_DIR}"
        mkdir -p ${BOOT_BACKUP_DIR}
    fi
    if [ -f ${BOOT_BACKUP_DIR}/.backup_ok ] ; then
        notify "Backup in ${BOOT_BACKUP_DIR} already there. Please discard first"
    else
        notify "Backing up /boot into ${BOOT_BACKUP_DIR}"
        rsync -a --delete /boot/ ${BOOT_BACKUP_DIR}/  > /dev/null 2>&1
        if [ $? = 0 ] ; then
            notify "Backup finished OK"
            touch ${BOOT_BACKUP_DIR}/.backup_ok
        else
            notify "Error in /boot backup"
            lock_delete
            exit 2
        fi
    echo "BOOT_BACKUP_DIR=\"${BOOT_BACKUP_DIR}\"" >> ${BACKUP_CONFIG}
	fi
}

function boot_rollback {
    if [ ! -r ${BACKUP_CONFIG} ] ; then
       	notify "Backup config file ${BACKUP_CONFIG} not found."
       	lock_delete
       	exit 7
	elif [ -f ${BOOT_BACKUP_DIR}/.backup_ok ] ; then
        notify "Restoring backup from ${BOOT_BACKUP_DIR} into /boot"
        rsync -a --delete ${BOOT_BACKUP_DIR}/ /boot/  > /dev/null 2>&1
        if [ $? = 0 ] ; then
            notify "Backup ${BOOT_BACKUP_DIR} restored OK"
    	else
    		notify "Error restoring backup from ${BOOT_BACKUP_DIR}"
    		lock_delete
    		exit 11	
    	fi   
    else
    	notify "Error in backup ${BOOT_BACKUP_DIR}"
    fi
}

function boot_discard {
	if [  -d ${BOOT_BACKUP_DIR} ] ; then
    	notify "Cleaning up backup in ${BOOT_BACKUP_DIR}"
    	rm -rf ${BOOT_BACKUP_DIR}    
    fi
}

function snapshot_info {
	if [ -r ${BACKUP_CONFIG} ] ; then
		check_use
		source ${BACKUP_CONFIG}
		echo "Backup and snapshot found"
		echo "Config file: ${BACKUP_CONFIG}"
		echo "Boot backup dir: ${BOOT_BACKUP_DIR}"
		echo "Snapshots of: ${BACKUP_DEVICES}"
		echo "Date: ${DATE}"
		echo
		echo "Snapshot info:"
		echo "  LV               VG   Attr      LSize   Pool Origin  Data%"
		lvs | grep _snapshot
		echo
		echo "Boot info:"
		echo "  Kernels"
		for KERNEL in $(ls ${BOOT_BACKUP_DIR}/vmlinuz*) ; do
			echo "    $(basename ${KERNEL})"
		done
		echo "  Size"
		echo "    $(du -sh ${BOOT_BACKUP_DIR})"
		
	else
		echo "Backup and snapshot not found"
	fi
}

case "$1" in
    --create)
    	header "Creating snapshots and backup"
    	lock_create
		check_create
		lv_create
		boot_create
        echo "DATE=\"$(date)\"" >> ${BACKUP_CONFIG}
        lock_delete
        ;;
    --rollback)
    	header "Rolling-back snapshots and recovering backup"
    	lock_create
    	check_use
    	boot_rollback
    	lv_rollback
    	lock_delete
    	;;
    --rollback-and-reboot)
    	header "Rolling-back snapshots, recovering backup and rebooting"
    	lock_create
    	check_use
    	boot_rollback
        lv_rollback
        lock_delete
        sync ; sync
        notify "Rebooting ..."
        reboot
        ;;
    --discard)
    	header "Discarding snapshots and backup"
    	lock_create
    	check_use
    	boot_discard
        lv_discard
        lock_delete
        ;;
    --cleanup)
    	header "Cleaning up snapshots and backup"
    	lock_create
    	boot_discard
        lv_cleanup
        lock_delete
    	;;
    --info)
    	header "Info about snapshots and backup"
    	snapshot_info
        ;;
    --help|--usage)
        usage
        exit 0
        ;;
    *)
        usage
        exit 1
esac

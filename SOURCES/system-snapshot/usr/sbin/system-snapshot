#!/bin/bash
#
# Script to create, merge or discard snapshots of system volumes
# it also backs up /boot in order to be enable the 
#
# This file may be distributed under the terms of the GNU General
# Public License.
#
# Author:   Miguel Pérez Colino <mperez@redhat.com>
# Version:  0.2
# Modifications:
#           2013-05-22  Creation
#           2013-05-23  Added some checks and logging
#           2013-10-28  Added backup config
#           2013-10-29  Added errorlevels and checks
#
# Errorlevels
#			1	No parameters received 
#			2	Command not run as root
#			3	Main config file not found
#			4	No backup devices defined in config file 
#			5	Snapshot already in place
#			6	Error during snapshot creation
#			7	Backup config file not found
#			8 	LV device not found
#			9	Error during rollback
#			10	Error during discard

# Default options
BACKUP_DEVICES=""
BACKUP_DIR="/var/tmp/system-snapshot"
BACKUP_CONFIG="${BACKUP_DIR}/config·
BOOT_BACKUP_DIR="${BACKUP_DIR}/boot"
SNAPSHOT_SIZE="20"

# Check we are running as root
if [ $(id -u) -ne 0 ]; then
    echo "This program must be run as root"
    exit 2
fi

# Loading vars from config file
if [ -r /etc/sysconfig/$(basename $0) ] 
	source /etc/sysconfig/$(basename $0)
else
	echo "Configuration file /etc/sysconfig/$(basename $0) not found"
	exit 3
fi	

function usage {
    echo "Usage: $(basename $0) [--create|--rollback|--discard]"
}

# Funtion "notify". Shows on screen and logs messages consistently
function notify {
    echo $1
    echo $(basename $0) [$$] $1 | logger
}

# Function to create LVM snapshots
function lv_create {
	# Check the existence of backup devices in config file
	if [ "xBACKUP_DEVICES" = "x" ] ;
		notify "No backup devices defined in config file /etc/sysconfig/$(basename $0)"
		exit 4
	fi
    
	# Check of previously created snapshots
    for DEVICE in $BACKUP_DEVICES ; do
        if [ -r ${DEVICE}_snapshot ] ; then
            notify "Snapshot ${DEVICE}_snapshot already in place, Please discard first"
            exit 5
        fi
    done
    
    # Create snapshots
    for DEVICE in $BACKUP_DEVICES ; do
        notify "Creating snapshot ${DEVICE}_snapshot for device ${DEVICE}"
        lvcreate --extents ${SNAPSHOT_SIZE}%ORIGIN --snapshot --name ${DEVICE}_snapshot ${DEVICE}
        if [ $? = 0 ] ; then
            notify "Snapshot for ${DEVICE} created OK"
        else
            notify "Error creating snapshot for ${DEVICE}"
            exit 6
        fi
	done
    
    # Include snapshots in config file
    echo "BACKUP_DEVICES=${BACKUP_DEVICES}" >> ${BACKUP_CONFIG}
}

function lv_rollback {
	# Check existence of backup config file and load it
	if [ -r ${BACKUP_CONFIG} ] ; then
        notify "Backup config file ${BACKUP_CONFIG} not found."
        exit 7
	else
		source ${BACKUP_CONFIG}
    fi
    
    # Check snapshot devices in place
    for DEVICE in $BACKUP_DEVICES ; do
		if [ ! -r ${DEVICE}_snapshot ] ; then
			notify "Device ${DEVICE}_snapshot not found exiting...!
			exit 8
		fi
		if [ ! -r ${DEVICE} ] ; then
			notify "Device ${DEVICE} not found exiting...!
			exit 8
        fi	
    done
    
    # Rollback!!!
	ERRORLVL=0
    for DEVICE in $BACKUP_DEVICES ; do
        notify "Rolling back snapshot ${DEVICE}_snapshot into device ${DEVICE}"
        lvconvert --merge ${DEVICE}_snapshot --background
        if [ $? = 0 ] ; then
            notify "Snapshot ${DEVICE}_snapshot rollback OK"
        else
            notify "Error in ${DEVICE}_snapshot rollback"
            ERRORLVL=1
        fi
    done
    if [ ERRORLVL != 0 ] ; then
    	notify "Error during rollback"
    	exit 9
    fi 
    
    notify "To finish the rollback, the system needs to be rebooted"
}

function lv_discard {
	# Check existence of backup config file and load it
	if [ -r ${BACKUP_CONFIG} ] ; then
        notify "Backup config file ${BACKUP_CONFIG} not found."
        exit 7
	else
		source ${BACKUP_CONFIG}
    fi
    
    # Check backup devices in place
    for DEVICE in $BACKUP_DEVICES ; do
		if [ ! -r ${DEVICE}_snapshot ] ; then
			notify "Device ${DEVICE}_snapshot not found exiting...!
			exit 8
		fi
	done
    
    ERRORLVL=0
    for DEVICE in $BACKUP_DEVICES ; do
        notify "Discarding device ${DEVICE}_snapshot"
        lvremove -f ${DEVICE}_snapshot
        if [ $? = 0 ] ; then
            notify "Snapshot ${DEVICE}_snapshot discarded OK"
        else
            notify "Error discarding snapshot ${DEVICE}_snapshot"
            ERRORLVL=1
        fi
    done
    if [ ERRORLVL != 0 ] ; then
    	notify "Error during discard"
    	exit 10
    fi 
}

function boot_create {
	# Check existence of BACKUP_DIR and create it if needed
	if [ ! -d ${BACKUP_DIR} ] ; then
		notify "Creating base backup dir ${BACKUP_DIR}"
    	mkdir -p ${BACKUP_DIR}
	fi
    if [ ! -d ${BOOT_BACKUP_DIR} ] ; then
        notify "Creating boot backup dir ${BOOT_BACKUP_DIR}"
        mkdir -p ${BOOT_BACKUP_DIR}
    fi
    if [ -f ${BOOT_BACKUP_DIR}/.backup_ok ] ; then
        notify "Backup in ${BOOT_BACKUP_DIR} already there. Please discard first"
    else
        notify "Backing up /boot into ${BOOT_BACKUP_DIR}"
        rsync -a --delete /boot/ ${BOOT_BACKUP_DIR}/
        if [ $? = 0 ] ; then
            notify "Backup finished OK"
            touch ${BOOT_BACKUP_DIR}/.backup_ok
        else
            notify "Error in /boot backup"
            exit 2
        fi
    echo "BOOT_BACKUP_DIR=${BOOT_BACKUP_DIR}" >> ${BACKUP_CONFIG}
	fi
}

function boot_rollback {
    if [ -f ${BOOT_BACKUP_DIR}/.backup_ok ] ; then
        notify "Restoring backup from ${BOOT_BACKUP_DIR} into /boot"
        rsync -a --delete ${BOOT_BACKUP_DIR}/ /boot/
    else
        notify "Backup in ${BOOT_BACKUP_DIR} is not OK"
    fi
}

function boot_discard {
    notify "Cleaning up backup in ${BOOT_BACKUP_DIR}"
    rm -rf ${BOOT_BACKUP_DIR}
}

case "$1" in
    --create)
		boot_create
        lv_create
        echo "DATE=$(date +%Y%m%d)" >> ${BACKUP_CONFIG}
        ;;
    --rollback)
    	boot_rollback
        lv_rollback
        ;;
    --rollback-and-reboot)
    	boot_rollback
        lv_rollback
        notify "Rebooting ..."
        reboot
        ;;
    --discard)
    	boot_discard
        lv_discard
        ;;
    --help|--usage)
        usage
        exit 0
        ;;
    *)
        usage
        exit 1
esac



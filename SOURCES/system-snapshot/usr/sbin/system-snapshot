#!/bin/bash
#
# Script to create, merge or discard snapshots of system volumes
# it also backs up /boot in order to be enable the 
#
# This file may be distributed under the terms of the GNU General
# Public License.
#
# Author:   Miguel PÃ©rez Colino <mperez@redhat.com>
# Version:  0.1
# Modifications:
#           2013-05-22  Creation
#           2013-05-23  Added some checks and logging
#

# Default options
BACKUP_DEVICES=""
BOOT_BACKUP_DIR="/var/tmp/boot"
LVCREATE_SIZE_ARGS="--extents 20%ORIGIN"

# Sourcing config file
[ -r /etc/sysconfig/$(basename $0) ] && . /etc/sysconfig/$(basename $0)

# Check we are running as root
if [ $(id -u) -ne 0 ]; then
    echo "This program must be run as root"
    exit 1
fi


function usage {
    echo "Usage: $(basename $0) [--create|--rollback|--discard]"
    exit 8
}

function notify {
    echo $1
    echo $(basename $0) [$$] $1 | logger
}

function lv_create {
    for DEVICE in $BACKUP_DEVICES ; do
        if [ -r ${DEVICE}_snap ] ; then
            notify "Snapshot ${DEVICE}_snap already in place, Please discard first"
        else
            notify "Creating snapshot ${DEVICE}_snap for device ${DEVICE}"
            lvcreate ${LVCREATE_SIZE_ARGS} --snapshot --name ${DEVICE}_snap ${DEVICE}
            if [ $? = 0 ] ; then
                notify "Snapshot for ${DEVICE} created OK"
            else
                notify "Error creating snapshot for ${DEVICE}"
                exit 1
            fi
        fi
    done
}

function lv_rollback {
    for DEVICE in $BACKUP_DEVICES ; do
        notify "Merging snapshot ${DEVICE}_snap into device ${DEVICE}"
        lvconvert --merge ${DEVICE}_snap --background
    done
    notify "To finish the rollback, you need to reboot the machine"
}

function lv_discard {
    for DEVICE in $BACKUP_DEVICES ; do
        notify "Discarding device ${DEVICE}_snap"
        lvremove -f ${DEVICE}_snap
        if [ $? = 0 ] ; then
            notify "Snapshot ${DEVICE}_snap discarded OK"
        else
            notify "Error discarding snapshot ${DEVICE}_snap"
        fi
    done
}

function boot_create {
    if [ ! -d ${BOOT_BACKUP_DIR} ] ; then
        notify "Creating backup dir ${BOOT_BACKUP_DIR}"
        mkdir ${BOOT_BACKUP_DIR}
    fi
    if [ -f ${BOOT_BACKUP_DIR}/.backup_ok ] ; then
        notify "Backup in ${BOOT_BACKUP_DIR} already there. Please discard first"
    else
        notify "Backing up /boot into ${BOOT_BACKUP_DIR}"
        rsync -a --delete /boot/ ${BOOT_BACKUP_DIR}/
        if [ $? = 0 ] ; then
            notify "Backup finished OK"
            touch ${BOOT_BACKUP_DIR}/.backup_ok
        else
            notify "Error in /boot backup"
        fi
    fi
}

function boot_rollback {
    if [ -f ${BOOT_BACKUP_DIR}/.backup_ok ] ; then
        notify "Restoring backup from ${BOOT_BACKUP_DIR} into /boot"
        rsync -a --delete ${BOOT_BACKUP_DIR}/ /boot/
    else
        notify "Backup in ${BOOT_BACKUP_DIR} is not OK"
    fi
}

function boot_discard {
    notify "Cleaning up backup in ${BOOT_BACKUP_DIR}"
    rm -rf ${BOOT_BACKUP_DIR}
}

case "$1" in
    --create)
        boot_create
        lv_create
        ;;
    --rollback)
        boot_rollback
        lv_rollback
        ;;
    --discard)
        boot_discard
        lv_discard
        ;;
    --help|--usage|*)
        usage
esac


